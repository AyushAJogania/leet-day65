class Solution {
public:
    int shortestPathLength(vector<vector<int>>& graph) {
        int n = graph.size();
        
        // Create a bitmask to represent visited nodes
        vector<vector<bool>> visited(n, vector<bool>(1 << n, false));
        queue<pair<int, int>> q;  // Queue to store node and bitmask
        
        // Initialize the BFS queue with all nodes
        for (int i = 0; i < n; ++i) {
            q.push({i, 1 << i});
            visited[i][1 << i] = true;
        }
        
        int steps = 0;
        
        while (!q.empty()) {
            int qSize = q.size();
            
            for (int i = 0; i < qSize; ++i) {
                int node = q.front().first;
                int mask = q.front().second;
                q.pop();
                
                if (mask == (1 << n) - 1) {
                    return steps;
                }
                
                for (int neighbor : graph[node]) {
                    int newMask = mask | (1 << neighbor);
                    
                    if (!visited[neighbor][newMask]) {
                        q.push({neighbor, newMask});
                        visited[neighbor][newMask] = true;
                    }
                }
            }
            
            ++steps;
        }
        
        return -1;  // If there is no path, return -1
    }
};
